plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 31

        // Use the test runner with JUnit4 support
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField 'String', 'VERSION_NAME', "\"$version\""
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    // For bolts-android 1.5.0
    //noinspection JcenterRepositoryObsolete
    jcenter()
    // For bolts-tasks and bolts-applinks 1.4.1-SNAPSHOT (which they should have released as version 1.5.0)
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api 'com.android.volley:volley:1.2.0'
    api 'com.parse.bolts:bolts-android:1.4.0'
    api('com.parse.bolts:bolts-android:1.5.0') {
        // It depends on bolts-tasks 1.5.0 and bolts-applinks 1.5.0 which were not released
        // but are available as version 1.4.1-SNAPSHOT so we will use that instead.
        transitive = false
    }
    api('com.parse.bolts:bolts-tasks:1.4.1-SNAPSHOT') {
        because 'bolts-tasks 1.5.0 was not released and is only available as this snapshot build'
    }
    api('com.parse.bolts:bolts-applinks:1.4.1-SNAPSHOT') {
        because 'bolts-applinkss 1.5.0 was not released and is only available as this snapshot build'
    }
    implementation 'com.datatheorem.android.trustkit:trustkit:1.1.3'
    implementation 'androidx.core:core:1.6.0'
    implementation 'androidx.preference:preference:1.1.1'

    // Mocks for testing.
    androidTestImplementation "org.mockito:mockito-core:3.10.0"
    androidTestImplementation "org.mockito:mockito-android:3.10.0"
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:rules:1.4.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.3"
}

apply from: file("repository.gradle")

def fullDocumentationDir(variant) {
    return "${buildDir.getPath()}/docs/java-docs-$variant.name/"
}

def getLocalProperties = {
    File propertiesFile = file('local.properties')
    if (propertiesFile.exists()) {
        Properties properties = new Properties()
        propertiesFile.withInputStream { instr ->
            properties.load(instr)
        }
        return properties
    }
}

def setProperty(key, props, localProps) {
    if (project.hasProperty(key)) {
        props[key] = project.property(key)
    } else {
        props[key] = localProps?.get(key) ?: ''
    }
}

task createTestPropertyFile {
    doLast {
        def propertyFile = new File("$projectDir/src/androidTest/assets/test.properties")
        if (!propertyFile.exists()) propertyFile.createNewFile()
        def props = new Properties()

        def localProperties = getLocalProperties()

        setProperty('testClientId', props, localProperties)
        setProperty('testClientSecret', props, localProperties)
        setProperty('testClientIdAccounting', props, localProperties)
        setProperty('testClientSecretAccounting', props, localProperties)
        setProperty('testApiUri', props, localProperties)
        setProperty('testApiUriAccounting', props, localProperties)
        setProperty('testUserCenterUri', props, localProperties)

        propertyFile.withWriter("utf-8") {
            props.store(it, "test properties")
        }
    }
}

task createIntegrationGuide(type: Exec) {
    commandLine './createIntegrationGuide.sh', "${project.projectDir}/src/doc", project.buildDir
}

tasks.whenTaskAdded { task ->
    if (task.name.endsWith("Test")) {
        task.dependsOn.add(createTestPropertyFile)
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        def javaCompile = variant.javaCompileProvider.get()
        source = javaCompile.source
        destinationDir = file(fullDocumentationDir(variant))
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = javaCompile.classpath + files(ext.androidJar)
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
	    options.encoding = 'UTF-8'
    }
}

apply from: rootProject.file('gradle/javadoc_coverage.gradle')
